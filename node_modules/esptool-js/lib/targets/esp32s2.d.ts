import { ESPLoader } from "../esploader.js";
import { ROM } from "./rom.js";
export declare class ESP32S2ROM extends ROM {
    CHIP_NAME: string;
    IMAGE_CHIP_ID: number;
    IROM_MAP_START: number;
    IROM_MAP_END: number;
    DROM_MAP_START: number;
    DROM_MAP_END: number;
    CHIP_DETECT_MAGIC_VALUE: number[];
    SPI_REG_BASE: number;
    SPI_USR_OFFS: number;
    SPI_USR1_OFFS: number;
    SPI_USR2_OFFS: number;
    SPI_MOSI_DLEN_OFFS: number;
    SPI_MISO_DLEN_OFFS: number;
    SPI_W0_OFFS: number;
    SPI_ADDR_REG_MSB: boolean;
    MAC_EFUSE_REG: number;
    UART_CLKDIV_REG: number;
    SUPPORTS_ENCRYPTED_FLASH: boolean;
    FLASH_ENCRYPTED_WRITE_ALIGN: number;
    EFUSE_BASE: number;
    EFUSE_RD_REG_BASE: number;
    EFUSE_BLOCK1_ADDR: number;
    EFUSE_BLOCK2_ADDR: number;
    EFUSE_PURPOSE_KEY0_REG: number;
    EFUSE_PURPOSE_KEY0_SHIFT: number;
    EFUSE_PURPOSE_KEY1_REG: number;
    EFUSE_PURPOSE_KEY1_SHIFT: number;
    EFUSE_PURPOSE_KEY2_REG: number;
    EFUSE_PURPOSE_KEY2_SHIFT: number;
    EFUSE_PURPOSE_KEY3_REG: number;
    EFUSE_PURPOSE_KEY3_SHIFT: number;
    EFUSE_PURPOSE_KEY4_REG: number;
    EFUSE_PURPOSE_KEY4_SHIFT: number;
    EFUSE_PURPOSE_KEY5_REG: number;
    EFUSE_PURPOSE_KEY5_SHIFT: number;
    EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG: number;
    EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT: number;
    EFUSE_SPI_BOOT_CRYPT_CNT_REG: number;
    EFUSE_SPI_BOOT_CRYPT_CNT_MASK: number;
    EFUSE_SECURE_BOOT_EN_REG: number;
    EFUSE_SECURE_BOOT_EN_MASK: number;
    EFUSE_RD_REPEAT_DATA3_REG: number;
    EFUSE_RD_REPEAT_DATA3_REG_FLASH_TYPE_MASK: number;
    PURPOSE_VAL_XTS_AES256_KEY_1: number;
    PURPOSE_VAL_XTS_AES256_KEY_2: number;
    PURPOSE_VAL_XTS_AES128_KEY: number;
    UARTDEV_BUF_NO: number;
    UARTDEV_BUF_NO_USB_OTG: number;
    USB_RAM_BLOCK: number;
    GPIO_STRAP_REG: number;
    GPIO_STRAP_SPI_BOOT_MASK: number;
    GPIO_STRAP_VDDSPI_MASK: number;
    RTC_CNTL_OPTION1_REG: number;
    RTC_CNTL_FORCE_DOWNLOAD_BOOT_MASK: number;
    RTCCNTL_BASE_REG: number;
    RTC_CNTL_WDTCONFIG0_REG: number;
    RTC_CNTL_WDTCONFIG1_REG: number;
    RTC_CNTL_WDTWPROTECT_REG: number;
    RTC_CNTL_WDT_WKEY: number;
    MEMORY_MAP: (string | number)[][];
    EFUSE_VDD_SPI_REG: number;
    VDD_SPI_XPD: number;
    VDD_SPI_TIEH: number;
    VDD_SPI_FORCE: number;
    UF2_FAMILY_ID: number;
    EFUSE_MAX_KEY: number;
    KEY_PURPOSES: {
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
    };
    UART_CLKDIV_MASK: number;
    UART_DATE_REG_ADDR: number;
    FLASH_WRITE_SIZE: number;
    BOOTLOADER_FLASH_OFFSET: number;
    FLASH_SIZES: {
        "1MB": number;
        "2MB": number;
        "4MB": number;
        "8MB": number;
        "16MB": number;
    };
    getPkgVersion(loader: ESPLoader): Promise<number>;
    getMinorChipVersion(loader: ESPLoader): Promise<number>;
    getMajorChipVersion(loader: ESPLoader): Promise<number>;
    getFlashVersion(loader: ESPLoader): Promise<number>;
    getChipDescription(loader: ESPLoader): Promise<string>;
    getFlashCap(loader: ESPLoader): Promise<number>;
    getPsramVersion(loader: ESPLoader): Promise<number>;
    getPsramCap(loader: ESPLoader): Promise<number>;
    getBlock2Version(loader: ESPLoader): Promise<number>;
    getChipFeatures(loader: ESPLoader): Promise<string[]>;
    getCrystalFreq(loader: ESPLoader): Promise<number>;
    _d2h(d: number): string;
    readMac(loader: ESPLoader): Promise<string>;
    getEraseSize(offset: number, size: number): number;
    usingUsbOtg(loader: ESPLoader): Promise<boolean>;
    postConnect(loader: ESPLoader): Promise<void>;
}
